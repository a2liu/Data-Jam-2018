import numpy as np
alldata = np.load("imagesarray.npy")
allclasses = np.load("classesarray.npy")
split = allclasses.shape[0]-10000


train_X = alldata[:split, :, :]
train_Y = allclasses[:split]
test_X = alldata[split:,]
test_Y = allclasses[split:,]


from keras.utils import to_categorical
import matplotlib.pyplot as plt

## Prints the size of the images.  should return numberOfImages, Dimension1, Dimension2.
print('Training data shape : ', train_X.shape, train_Y.shape)
print('Testing data shape : ', test_X.shape, test_Y.shape)

##finds the number of uniques output classes, and also prints what those classes are.
classes = np.unique(train_Y)
nClasses = len(classes)
print('Total number of outputs : ', nClasses)
print('Output classes : ', classes)

#//


plt.figure(figsize=[5,5])

## Display the eighth image in training data for testing
plt.subplot(121)
plt.imshow(train_X[8,:,:], cmap='gray')
plt.title("Ground Truth : {}".format(train_Y[8]))

## Display the first image in testing data for testing
plt.subplot(122)
plt.imshow(test_X[0,:,:], cmap='gray')
plt.title("Ground Truth : {}".format(test_Y[0]))

##the command below, plt.show(), will pause the program to show the graphs that have been constructed up until that point
plt.show()


##________________CONVERTING THE IMAGES INTO NUMBERS__________________

#reshaping the images to 3D
train_X = train_X.reshape(-1, 128,128, 1)
test_X = test_X.reshape(-1, 128,128, 1)

##Converting each number from int8 to float32
train_X = train_X.astype('float32')
test_X = test_X.astype('float32')

##rescales values 0-255 inclusive to 0-1 inclusive.
##Unnecessary because numbers are already between 0 and 1
# train_X = train_X / 255.
# test_X = test_X / 255.

# Change the labels from categorical to one-hot encoding
#i.e., converts simple int classes into a row vector of all zeroes except for a single one.
train_Y_one_hot = to_categorical(train_Y)
test_Y_one_hot = to_categorical(test_Y)
#prints the change from category label using one-hot encoding
print('Original label:', train_Y[0])
print('After conversion to one-hot:', train_Y_one_hot[0])
